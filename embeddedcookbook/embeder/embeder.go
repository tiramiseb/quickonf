package main

import (
	"fmt"
	"io"

	"github.com/tiramiseb/quickonf/embeddedcookbook"
	"github.com/tiramiseb/quickonf/instructions"
)

var (
	head = []byte(`// Code generated by "embedded-cookbook". DO NOT EDIT.

package instructions

import "github.com/tiramiseb/quickonf/commands"

func init() {
`)

	foot = []byte(`}
`)
)

type embeder struct {
	w io.Writer
}

func (e *embeder) make() {
	e.w.Write(head)

	if err := embeddedcookbook.ForEach(func(group *instructions.Group) error {
		e.write(1, "recipes[\"%s\"] = CookbookRecipe{", group.Name)
		if group.RecipeDoc != "" {
			e.write(2, "Doc: `%s`,", group.RecipeDoc)
		}
		if len(group.RecipeVarsDoc) > 0 {
			e.write(2, "VarsDoc: map[string]string{")
			for k, v := range group.RecipeVarsDoc {
				e.write(3, "`%s`: `%s`,", k, v)
			}
			e.write(2, "},")
		}
		e.write(2, "Instructions: []Instruction{")
		for _, ins := range group.Instructions {
			e.instruction(3, ins)
		}
		e.write(2, "},")
		e.write(1, "}")
		return nil
	}); err != nil {
		panic(err)
	}

	e.w.Write(foot)
}

func (e *embeder) write(level int, format string, a ...any) {
	for i := 0; i < level; i++ {
		e.w.Write([]byte{'\t'})
	}
	e.w.Write([]byte(fmt.Sprintf(format, a...)))
	e.w.Write([]byte{'\n'})
}
